[project]
name = "opennutrilab"
version = "0.1.0"
description = "An open-source app for precise food and meal analysis"
authors = [{ name = "Andre Lanrezac", email = "a.lanrezac@gmail.com" }]
requires-python = "==3.13.*"
readme = "README.md"
license = { text = "GPL-3.0-or-later" }
dependencies = [
    "django (>=5.2.3,<6.0.0)",
    "django-pint (>=0.7.3,<0.8.0)",
    "django-vanilla-views (>=3.0.0,<4.0.0)",
    "requests (>=2.32.3,<3.0.0)",
    "pillow (>=11.2.1,<12.0.0)",
    "werkzeug (>=3.1.3,<4.0.0)",
    "django-environ (>=0.12.0,<0.13.0)",
    "django-ninja (>=1.4.3,<2.0.0)",
    "debugpy (>=1.8.14,<2.0.0)",
    "glom (>=24.11.0,<25.0.0)",
    "crispy-bootstrap5 (>=2025.6,<2026.0)",
    "uvicorn>=0.35.0",
    "whitenoise>=6.9.0",
    "django-webpack-loader>=3.2.1",
    "django-cors-headers>=4.7.0",
    "django-allauth[mfa]>=65.11.1",
    "argon2-cffi>=25.1.0",
    "celery>=5.5.3",
    "django-celery-beat>=2.8.1",
    "django-redis>=6.0.0",
    "flower>=2.0.1",
    "hiredis>=3.2.1",
    "redis>=6.4.0",
    "psycopg[binary]>=3.2.10",
    "djangorestframework>=3.16.1",
    "drf-spectacular>=0.28.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "django-types>=0.22.0,<0.23",
    "coverage>=7.10.3,<8",
    "pytest>=8.4.1,<9",
    "pytest-django>=4.11.1,<5",
    "django-extensions>=4.1",
    "django-debug-toolbar>=6.0.0",
    "basedpyright>=1.31.3",
    "pytest-sugar>=1.1.0",
    "django-stubs-ext>=5.2.2",
    "watchfiles>=1.1.0",
    "pre-commit>=4.3.0",
    "djlint>=1.36.4",
    "psycopg[binary]>=3.2.10",
    "factory-boy>=3.3.3",
    "djangorestframework-types>=0.9.0",
]

# ==== pytest ====
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = ["test_*.py", "test_*.py"]

# ==== Coverage ====
[tool.coverage.run]
include = ["opennutrilab/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

# ==== basedpyright ====
[tool.basedpyright]
# Target Python version
pythonVersion = "3.12"

# Type checking mode: "off" | "basic" | "strict"
# Use "strict" for stronger checks, "basic" for fewer warnings
typeCheckingMode = "strict"

# Use installed libraries' code for type inference (helpful with django-stubs, etc.)
useLibraryCodeForTypes = true

# Missing imports handling (equivalent to mypy ignore_missing_imports)
reportMissingImports = false
reportMissingTypeStubs = false

# Optional type checks (null/None-related issues)
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalSubscript = true
reportOptionalIterable = true
reportOptionalOperand = true

# General diagnostics
reportUnboundVariable = true
reportUndefinedVariable = true
reportUnusedImport = false    # Set to true if you want to detect unused imports
reportUnusedVariable = false  # Set to true if you want to detect unused variables

# Exclude paths from analysis (equivalent to mypy overrides for migrations)
exclude = ["**/migrations/**", "**/node_modules/**", ".venv/**"]



# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2


[tool.ruff]
target-version = "py312"
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    "*/migrations/*.py",
    "staticfiles/*",
]

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "FA",
    'ISC',
    "ICN",
    "G",
    'INP',
    'PIE',
    "T20",
    'PYI',
    'PT',
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TC",
    "INT",
    # "ARG", # Unused function argument
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    # "NPY",
    # "AIR",
    "PERF",
    # "FURB",
    # "LOG",
    "RUF",
]
ignore = [
    "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM102", # sometimes it's better to nest
    "UP038", # Checks for uses of isinstance/issubclass that take a tuple
    # of types for comparison.
    # Deactivated because it can make the code slow:
    # https://github.com/astral-sh/ruff/issues/7871
]
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
  "UP038",
]

[tool.ruff.lint.isort]
force-single-line = true
